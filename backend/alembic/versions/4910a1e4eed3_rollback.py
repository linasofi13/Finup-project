"""rollback

Revision ID: 4910a1e4eed3
Revises: a80c6d877dcc
Create Date: 2025-04-21 08:32:55.890019

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '4910a1e4eed3'
down_revision: Union[str, None] = 'a80c6d877dcc'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_index('ix_country_id', table_name='country', if_exists=True)
    # op.drop_table('country', if_exists=True)
    
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('evc_financial', sa.Column('role_provider_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('evc_financial_role_provider_id_fkey', 'evc_financial', 'role_provider', ['role_provider_id'], ['id'])
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('username', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('password', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey')
    )
    op.create_index('ix_users_username', 'users', ['username'], unique=False)
    op.create_index('ix_users_id', 'users', ['id'], unique=False)
    op.create_index('ix_users_email', 'users', ['email'], unique=False)
    op.create_table('evc_providers',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('evc_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('provider_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('role_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['evc_id'], ['evc.id'], name='evc_providers_evc_id_fkey'),
    sa.ForeignKeyConstraint(['provider_id'], ['providers.id'], name='evc_providers_provider_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='evc_providers_pkey')
    )
    op.create_index('ix_evc_providers_id', 'evc_providers', ['id'], unique=False)
    op.create_table('category_provider',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('category_provider_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='category_provider_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_category_provider_id', 'category_provider', ['id'], unique=False)
    op.create_table('category_role',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('category_role_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='category_role_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_category_role_id', 'category_role', ['id'], unique=False)
    op.create_table('provider',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('provider_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('company', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('category_provider_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('role', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_provider_id'], ['category_provider.id'], name='provider_category_provider_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='provider_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_provider_name', 'provider', ['name'], unique=False)
    op.create_index('ix_provider_id', 'provider', ['id'], unique=False)
    op.create_index('ix_provider_email', 'provider', ['email'], unique=False)
    op.create_table('role',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('role_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=80), autoincrement=False, nullable=False),
    sa.Column('category_role_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_role_id'], ['category_role.id'], name='role_category_role_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='role_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_role_id', 'role', ['id'], unique=False)
    op.create_table('role_provider',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_update', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('price_usd', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('provider_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('country_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['country_id'], ['country.id'], name='role_provider_country_id_fkey'),
    sa.ForeignKeyConstraint(['provider_id'], ['provider.id'], name='role_provider_provider_id_fkey'),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], name='role_provider_role_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='role_provider_pkey')
    )
    op.create_index('ix_role_provider_id', 'role_provider', ['id'], unique=False)
    op.create_table('country',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='country_pkey')
    )
    op.create_index('ix_country_id', 'country', ['id'], unique=False)
    # ### end Alembic commands ###
