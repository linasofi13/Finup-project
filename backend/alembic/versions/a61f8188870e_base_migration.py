"""Base migration

Revision ID: a61f8188870e
Revises: 
Create Date: 2025-03-11 15:10:08.134659

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a61f8188870e'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_table('provider')
    # op.drop_table('role')
    # op.drop_table('country')
    # op.drop_table('role_provider')
    # op.drop_table('entorno')
    # op.drop_table('evc_q')
    # op.drop_table('evc')
    # op.drop_table('category_provider')
    # op.drop_table('category_role')
    # op.drop_table('evc_financial')
    # op.drop_table('functional_leader')
    # op.drop_table('technical_leader')
    # op.add_column('app_user', sa.Column('app_user_id', sa.Integer(), nullable=False))
    # op.drop_index('ix_app_user_app_user_id', table_name='app_user')
    # op.create_index(op.f('ix_app_user_app_user_id'), 'app_user', ['app_user_id'], unique=False)
    # op.create_unique_constraint(None, 'app_user', ['username'])
    # op.drop_column('app_user', 'id')
    # op.add_column('app_user_category', sa.Column('app_user_id', sa.Integer(), nullable=True))
    # op.drop_constraint('to_app_user', 'app_user_category', type_='foreignkey')
    # op.drop_constraint('to_category', 'app_user_category', type_='foreignkey')
    # op.create_foreign_key(None, 'app_user_category', 'app_user', ['app_user_id'], ['app_user_id'])
    # op.create_foreign_key(None, 'app_user_category', 'category', ['category_id'], ['category_id'])
    # op.drop_column('app_user_category', 'id')
    # op.add_column('category', sa.Column('category_id', sa.Integer(), nullable=False))
    # op.drop_index('ix_category_category_id', table_name='category')
    # op.create_index(op.f('ix_category_category_id'), 'category', ['category_id'], unique=False)
    # op.drop_column('category', 'id')
    # op.drop_column('category', 'last_update')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('category', sa.Column('last_update', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('category', sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('category_category_id_seq'::regclass)"), autoincrement=True, nullable=False))
    op.drop_index(op.f('ix_category_category_id'), table_name='category')
    op.create_index('ix_category_category_id', 'category', ['id'], unique=False)
    op.drop_column('category', 'category_id')
    op.add_column('app_user_category', sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'app_user_category', type_='foreignkey')
    op.drop_constraint(None, 'app_user_category', type_='foreignkey')
    op.create_foreign_key('to_category', 'app_user_category', 'category', ['category_id'], ['id'])
    op.create_foreign_key('to_app_user', 'app_user_category', 'app_user', ['id'], ['id'])
    op.drop_column('app_user_category', 'app_user_id')
    op.add_column('app_user', sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False))
    op.drop_constraint(None, 'app_user', type_='unique')
    op.drop_index(op.f('ix_app_user_app_user_id'), table_name='app_user')
    op.create_index('ix_app_user_app_user_id', 'app_user', ['id'], unique=False)
    op.drop_column('app_user', 'app_user_id')
    op.create_table('technical_leader',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('technical_leader_technical_leader_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=80), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('entry_date', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='technical_leader_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('functional_leader',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('functional_leader_functional_leader_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=80), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('entry_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='functional_leader_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('evc_financial',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('evc_q_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('role_provider_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['evc_q_id'], ['evc_q.id'], name='evc_financial_evc_q_id_fkey'),
    sa.ForeignKeyConstraint(['role_provider_id'], ['role_provider.id'], name='evc_financial_role_provider_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='evc_financial_pkey')
    )
    op.create_table('category_role',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('category_role_category_role_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='category_role_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('category_provider',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('category_provider_category_provider_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name_category', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='category_provider_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('evc',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('evc_evc_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=60), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('entorno_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('functional_leader_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('technical_leader_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.SMALLINT(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('creation_date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=False),
    sa.Column('update_date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['entorno_id'], ['entorno.id'], name='evc_entorno_id_fkey'),
    sa.ForeignKeyConstraint(['functional_leader_id'], ['functional_leader.id'], name='evc_functional_leader_id_fkey'),
    sa.ForeignKeyConstraint(['technical_leader_id'], ['technical_leader.id'], name='evc_technical_leader_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='evc_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('evc_q',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('evc_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('year', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('q', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('allocated_budget', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('allocated_percentage', sa.REAL(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['evc_id'], ['evc.id'], name='evc_q_evc_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='evc_q_pkey')
    )
    op.create_table('entorno',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=60), autoincrement=False, nullable=False),
    sa.Column('functional_leader_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('technical_leader_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.SMALLINT(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('creation_date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=True),
    sa.Column('update_date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='entorno_pkey')
    )
    op.create_table('role_provider',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('provider_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('last_update', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('price_usd', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('country_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['country_id'], ['country.id'], name='role_provider_country_id_fkey'),
    sa.ForeignKeyConstraint(['provider_id'], ['provider.id'], name='role_provider_provider_id_fkey'),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], name='role_provider_role_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='role_provider_pkey')
    )
    op.create_table('country',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='country_pkey')
    )
    op.create_table('role',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=80), autoincrement=False, nullable=False),
    sa.Column('category_role_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_role_id'], ['category_role.id'], name='role_category_role_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='role_pkey')
    )
    op.create_table('provider',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=60), autoincrement=False, nullable=False),
    sa.Column('category_provider_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['category_provider_id'], ['category_provider.id'], name='provider_category_provider_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='provider_pkey')
    )
    # ### end Alembic commands ###
