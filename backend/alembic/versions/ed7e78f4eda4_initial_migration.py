"""Initial migration

Revision ID: ed7e78f4eda4
Revises: 
Create Date: 2025-03-09 23:31:02.277161

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "ed7e78f4eda4"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("functional_leader")
    op.drop_table("technical_leader")
    op.drop_table("country")
    op.drop_table("evc_financial")
    op.drop_table("role_provider")
    op.drop_table("entorno")
    op.drop_table("evc_q")
    op.drop_table("category_provider")
    op.drop_table("category_role")
    op.drop_table("role")
    op.drop_table("evc")
    op.drop_table("provider")
    op.create_index(
        op.f("ix_app_user_app_user_id"), "app_user", ["app_user_id"], unique=False
    )
    op.create_unique_constraint(None, "app_user", ["username"])
    op.alter_column(
        "app_user_category", "app_user_id", existing_type=sa.INTEGER(), nullable=True
    )
    op.alter_column(
        "app_user_category", "category_id", existing_type=sa.INTEGER(), nullable=True
    )
    op.create_index(
        op.f("ix_app_user_category_app_user_category_id"),
        "app_user_category",
        ["app_user_category_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_category_category_id"), "category", ["category_id"], unique=False
    )
    op.drop_column("category", "last_update")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "category",
        sa.Column(
            "last_update", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
    )
    op.drop_index(op.f("ix_category_category_id"), table_name="category")
    op.drop_index(
        op.f("ix_app_user_category_app_user_category_id"),
        table_name="app_user_category",
    )
    op.alter_column(
        "app_user_category", "category_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.alter_column(
        "app_user_category", "app_user_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.drop_constraint(None, "app_user", type_="unique")
    op.drop_index(op.f("ix_app_user_app_user_id"), table_name="app_user")
    op.create_table(
        "provider",
        sa.Column(
            "provider_id",
            sa.INTEGER(),
            server_default=sa.text("nextval('provider_provider_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(length=60), autoincrement=False, nullable=False),
        sa.Column(
            "category_provider_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["category_provider_id"],
            ["category_provider.category_provider_id"],
            name="provider_category_provider_id_fkey",
        ),
        sa.PrimaryKeyConstraint("provider_id", name="provider_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "evc",
        sa.Column(
            "evc_id",
            sa.INTEGER(),
            server_default=sa.text("nextval('evc_evc_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(length=60), autoincrement=False, nullable=False),
        sa.Column("description", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("entorno_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "functional_leader_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "technical_leader_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "status",
            sa.SMALLINT(),
            server_default=sa.text("0"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "creation_date",
            sa.DATE(),
            server_default=sa.text("CURRENT_DATE"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DATE(),
            server_default=sa.text("CURRENT_DATE"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["entorno_id"], ["entorno.entorno_id"], name="evc_entorno_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["functional_leader_id"],
            ["functional_leader.functional_leader_id"],
            name="evc_functional_leader_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["technical_leader_id"],
            ["technical_leader.technical_leader_id"],
            name="evc_technical_leader_id_fkey",
        ),
        sa.PrimaryKeyConstraint("evc_id", name="evc_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "role",
        sa.Column(
            "role_id",
            sa.INTEGER(),
            server_default=sa.text("nextval('role_role_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(length=80), autoincrement=False, nullable=False),
        sa.Column("category_role_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["category_role_id"],
            ["category_role.category_role_id"],
            name="role_category_role_id_fkey",
        ),
        sa.PrimaryKeyConstraint("role_id", name="role_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "category_role",
        sa.Column(
            "category_role_id",
            sa.INTEGER(),
            server_default=sa.text(
                "nextval('category_role_category_role_id_seq'::regclass)"
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(length=50), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("category_role_id", name="category_role_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "category_provider",
        sa.Column(
            "category_provider_id",
            sa.INTEGER(),
            server_default=sa.text(
                "nextval('category_provider_category_provider_id_seq'::regclass)"
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "name_category", sa.VARCHAR(length=50), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("category_provider_id", name="category_provider_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "evc_q",
        sa.Column(
            "evc_q_id",
            sa.INTEGER(),
            server_default=sa.text("nextval('evc_q_evc_q_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("evc_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("year", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("q", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "allocated_budget",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "allocated_percentage", sa.REAL(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(["evc_id"], ["evc.evc_id"], name="evc_q_evc_id_fkey"),
        sa.PrimaryKeyConstraint("evc_q_id", name="evc_q_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "entorno",
        sa.Column(
            "entorno_id",
            sa.INTEGER(),
            server_default=sa.text("nextval('entorno_entorno_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(length=60), autoincrement=False, nullable=False),
        sa.Column(
            "functional_leader_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "technical_leader_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "status",
            sa.SMALLINT(),
            server_default=sa.text("0"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "creation_date",
            sa.DATE(),
            server_default=sa.text("CURRENT_DATE"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "update_date",
            sa.DATE(),
            server_default=sa.text("CURRENT_DATE"),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("entorno_id", name="entorno_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "role_provider",
        sa.Column(
            "role_provider_id",
            sa.INTEGER(),
            server_default=sa.text(
                "nextval('role_provider_role_provider_id_seq'::regclass)"
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("role_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("provider_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "last_update",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "price_usd",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("country_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["country_id"], ["country.country_id"], name="role_provider_country_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["provider_id"],
            ["provider.provider_id"],
            name="role_provider_provider_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["role_id"], ["role.role_id"], name="role_provider_role_id_fkey"
        ),
        sa.PrimaryKeyConstraint("role_provider_id", name="role_provider_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "evc_financial",
        sa.Column("evc_financial_id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("evc_q_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "role_provider_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["evc_q_id"], ["evc_q.evc_q_id"], name="evc_financial_evc_q_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["role_provider_id"],
            ["role_provider.role_provider_id"],
            name="evc_financial_role_provider_id_fkey",
        ),
        sa.PrimaryKeyConstraint("evc_financial_id", name="evc_financial_pkey"),
    )
    op.create_table(
        "country",
        sa.Column("country_id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(length=50), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("country_id", name="country_pkey"),
    )
    op.create_table(
        "technical_leader",
        sa.Column(
            "technical_leader_id", sa.INTEGER(), autoincrement=True, nullable=False
        ),
        sa.Column("name", sa.VARCHAR(length=80), autoincrement=False, nullable=False),
        sa.Column("email", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column(
            "entry_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("technical_leader_id", name="technical_leader_pkey"),
    )
    op.create_table(
        "functional_leader",
        sa.Column(
            "functional_leader_id", sa.INTEGER(), autoincrement=True, nullable=False
        ),
        sa.Column("name", sa.VARCHAR(length=80), autoincrement=False, nullable=False),
        sa.Column("email", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column(
            "entry_date", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("functional_leader_id", name="functional_leader_pkey"),
    )
    # ### end Alembic commands ###
